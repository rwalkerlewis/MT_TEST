[pylithapp.metadata]
#  y
#  ^
#  |
#   --> x

base = [pylithapp.cfg]
description = Ricker source test.
authors = [Robert Walker]
keywords = [Ricker source, time-dependent Dirichlet boundary condition]
arguments = [step04_ricker.cfg]
version = 1.0.0
pylith_version = [>=3.0, <7.0]

features = [
    pylith.problems.SolnDispVel,
    pylith.bc.DirichletTimeDependent,
    spatialdata.spatialdb.ZeroDB
    ]

[pylithapp]
# File with version information and parameters (including defaults).
#
# You can view this file using the pylith_parameters application or
# online at https://geodynamics.github.io/pylith_parameters/.
dump_parameters.filename = output/step04_ricker-parameters.json
problem.progress_monitor.filename = output/step04_ricker-progress.txt

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = step04_ricker

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem]
# Use the nonlinear solver to verify residual and Jacobian are consistent.
solver = nonlinear
formulation = dynamic

# Nondimensionalize problem using wave propagation parameters.
normalizer = spatialdata.units.NondimElasticDynamic
normalizer.mass_density = 2500.0*kg/m**3
normalizer.shear_wave_speed = 1000.0*m/s
normalizer.wave_period = 1.0*s

defaults.quadrature_order = 1


# Set the discretization for each of the solution subfields.
#
solution = pylith.problems.SolnDispPresVel

solution.subfields.displacement.basis_order = 1
solution.subfields.velocity.basis_order = 1

solution_observers = [domain]

start_time = 0.0*s
end_time = 2.0*s
initial_dt = 0.01*s

[pylithapp.problem.solution_observers.domain]
# Skip 1 time step between output for the domain.
trigger.num_skip = 10

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
# Set the reader to match the type of mesh file.
reader = pylith.meshio.MeshIOPetsc
#reader = pylith.meshio.MeshIOCubit
#reader.filename = mesh_quad.exo

# Set the Cartesian coordinate system.

reader.coordsys.space_dim = 2

#refiner = pylith.topology.RefineUniform
# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
[pylithapp.problem]
# Create an array of one material
materials = [poroelastic]
materials.poroelastic = pylith.materials.Poroelasticity

[pylithapp.problem.materials]
poroelastic.bulk_rheology = pylith.materials.IsotropicLinearPoroelasticity


[pylithapp.problem.materials.poroelastic]
# id must match the values in the mesh material-ids.
description = Poroelastic material
label_value = 1
observers = []
#observers.observer.trigger.num_skip = 10
# We will use uniform material properties, so we use the UniformDB
# spatial database.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Poroelastic properties
db_auxiliary_field.values = [solid_density, fluid_density, fluid_viscosity, porosity, shear_modulus, drained_bulk_modulus, biot_coefficient, fluid_bulk_modulus, solid_bulk_modulus, isotropic_permeability]

db_auxiliary_field.data =   [ 1800*kg/m**3,  1000*kg/m**3,      0.001*Pa*s,     0.01,     3.04e9*Pa,              10e9*Pa,              0.8,           2.0e9*Pa,            80e9*Pa, 1e-15*m**2]

# Set the discretization of the material auxiliary fields (properties).
# We have uniform material properties, so we can use a basis order of 0.
# Set basis order to 0 for uniform properties and a basis order of 1 for Cauchy stress and strain.
auxiliary_subfields.body_force.basis_order = 0
auxiliary_subfields.solid_density.basis_order = 0
auxiliary_subfields.fluid_density.basis_order = 0
auxiliary_subfields.fluid_viscosity.basis_order = 0
auxiliary_subfields.gravitational_acceleration.basis_order = 0
auxiliary_subfields.porosity.basis_order = 0
derived_subfields.cauchy_strain.basis_order = 1
derived_subfields.cauchy_stress.basis_order = 1

[pylithapp.problem.materials.poroelastic.bulk_rheology]
# Set basis order to 0 for uniform properties
auxiliary_subfields.drained_bulk_modulus.basis_order = 0
auxiliary_subfields.shear_modulus.basis_order = 0
auxiliary_subfields.biot_coefficient.basis_order = 0
auxiliary_subfields.biot_modulus.basis_order = 0
auxiliary_subfields.isotropic_permeability.basis_order = 0


# ----------------------------------------------------------------------
# sources
# ----------------------------------------------------------------------

[pylithapp.problem]
sources = [source]

sources.source = pylith.sources.MomentTensorForce
[pylithapp.problem.sources]
source.source_time_function = pylith.sources.RickerWavelet

[pylithapp.problem.sources.source]
description = Ricker Source
label_value = 2
reader.filename = source_sites.txt
reader.coordsys = spatialdata.geocoords.CSCart
reader.coordsys.space_dim = 2

db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = source properties
db_auxiliary_field.values = [moment_tensor_xx, moment_tensor_yy, moment_tensor_xy, moment_tensor_zz, time_delay, center_frequency]
#db_auxiliary_field.data   = [0*newton*m, 0*newton*m, 1000.0*newton*m, 0.0*newton*m, -1.0*s, 0.5]
db_auxiliary_field.data   = [1e14*newton*m, 1e14*newton*m, 0.0*newton*m, 1e14*newton*m, 0.0*s, 0.5]


# Set the discretization of the material auxiliary fields (properties).
# We have uniform material properties, so we can use a basis order of 0.
auxiliary_subfields.moment_tensor.basis_order = 0
auxiliary_subfields.time_delay.basis_order = 0
source_time_function.auxiliary_subfields.center_frequency.basis_order = 0



# ----------------------------------------------------------------------
# initial conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
ic = [domain]
ic.domain = pylith.problems.InitialConditionDomain

[pylithapp.problem.ic.domain]
db = spatialdata.spatialdb.UniformDB
db.description = Initial conditions over domain
db.values = [displacement_x, displacement_y, pressure, trace_strain]
db.data = [0.0*m, 0.0*m, 0.0*MPa, 0.0]

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]


# ----------------------------------------------------------------------
# PETSc
# ----------------------------------------------------------------------
[pylithapp.petsc]
ts_type = rk
ts_rk_type = 3bs
ts_adapt_dt_max = 0.01
dm_partition_view = True

dm_plex_box_faces = 100,100
dm_plex_box_lower = 0,0
dm_plex_box_upper = 10000,10000
dm_plex_simplex = 0

# End of file
